plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '5.1.+'
//	id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
//	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
	id 'com.github.johnrengelman.shadow' version "${shadow_version}"
}

version = "${mc_version}-${mod_version}"
group = "com.arcanarevived.${modid}"
archivesBaseName = modid

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.19'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
//            arg "-mixin.config=createcommodities.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', modid

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
//            arg "-mixin.config=createcommodities.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${modid}"

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${modid}"

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', "${modid}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "Curse Maven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { // mixins
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven { // JEI 1
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { // JEI 2
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { // Registrate
        name = "tterrag maven"
        url = "https://maven.tterrag.com/"
    }

    mavenLocal()

    // Jar dependencies in ./libs:
    // flatDir {
    //     dir 'libs'
    // }
}

configurations {
    shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

	def registrate = "com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}"
    implementation fg.deobf(registrate)
    shade registrate

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // From ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

	// annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : modid,
                "Specification-Vendor"    : "Arcana Dev Team",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Arcana Dev Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'com.arcanarevived.arcana.repack.registrate'
}

reobf {
    shadowJar {}
}

artifacts {
    archives jar, shadowJar
}

build.dependsOn shadowJar
build.dependsOn reobfShadowJar

jar.finalizedBy('reobfJar')

//publishing {
//    tasks.publish.dependsOn 'build'
//    publications {
//        mavenJava(MavenPublication) {
//            artifact shadowJar
//        }
//    }
//    repositories {
//        maven {
//            url "file://${project.projectDir}/mcmodsrepo"
//        }
//    }
//}
